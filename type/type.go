package learn_type

import (
	"fmt"
)

func TypeMain() {
	fmt.Println("Chapter2 primitive type and variable")
}

// ❐ 基本型(primitive type) ❐
//
// ・論理型
// ・整数型
// ・浮動小数点型
// ・文字列型

// ❐ ゼロ値　❐
//
// 「宣言されたが値が割り当てられていない変数」に対してデフォルトのゼロ値(zero value)が割り当てられる。

// ❐　リテラル　❐
//
// 数値や文字、文字列などをじかに示したもの
// Goでは4種類ある

//　1.整数リテラル
// 通常は10進数として表す
// 他には「0b」を頭に置くことで2進数(binary)、「0o」で8進数(octal)、「0x」で16進数(hexadeciaml)を表せる
//
// Goでは整数リテラルの任意の箇所にアンダースコア「_」を書ける
// 例)「1_234」
// ※「1_2_3_4」は読みにくくなるから推奨しない
//
// ☆☆ アンダースコア「_」は10進数を3桁ごとに区切るのに用いたり、2,8,16進数で2文字、4文字ごとに区切るのに用いることが推奨される ☆☆

// 2.浮動小数点リテラル
// 「3.14」や「6.03e23」の様な指数を使った表記も可能
//
// 「0x」を頭につけることで16進数で表現できる
//
// 整数リテラル同様、浮動小数点リテラルでも桁を区切る目的で「_」が使える

// 3.runeリテラル
// 文字を表す
//
// ☆　先頭と最後にシングルクォテーション「'」を置く ☆
//
// runeリテラルは次の形式で表現される
//
// ・1文字のUnicode文字 (例：'a')
// ・8ビット8進数 (例：'\141')
// ・8ビット16進数 (例：'\x61')
// ・16ビット16進数 (例：'\u0061')
// ・32ビット Unicode (例：'\U00000061')
//
// この他に、バックスラッシュ「\」でエスケープされたruneリテラルもある
// 主なものは
//
// ・改行 ('\n')
// ・タブ ('\t')
// ・一重引用符 ('\'') ※シングルクオート
// ・二重引用符 ('\"') ※ダブルクオート
// ・バックスラッシュ ('\')

// 4.文字列リテラル
//
// 文字列リテラルを表すのに2つの方法がある
//
// 〇 解釈済みの文字列リテラル (interpreted string literal)
// ◇ 生(ロー)文字列リテラル (raw string literal)
//
//　ほとんどの場合は「"」の組を使って「解釈済み文字列リテラル」を作る
// この場合は0個以上のruneリテラルを含むことができる
// ここで使えない文字は、エスケープされていない「\」、改行、それに「"」がある
//
// ☆ 解釈済み文字列リテラルを使って2行にわたる文字列を表示したい場合は、「\n」を使って改行する必要がある
//
//
// 文字列中に「\」、改行、「"」を含めたい場合は、「`」(バッククォート)で囲まれた生(ロー)の文字列リテラルを使用する
// ロー文字リテラルには「`」(バッククォート)以外の任意の文字を含めることができる
// 次のようにすることで改行や二重引用符を文字列中に書くことができる

// *************************************************
// GOの言語使用により、ソースコードは常にUTF-8で書かれる
// 16進数のエスケープを使わない限り、文字列リテラルUTF-8で書かれる
// *************************************************

// ❐ リテラルと型 ❐
//
